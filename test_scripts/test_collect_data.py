# import sys
# sys.path.append('../dependencies')
from dependencies import output_processing as op
import unittest


class Test_output_processing(unittest.TestCase):

    def test_Energy_Extraction(self):

        input_files = ['CCSD_Ethanol_dal.out', 'CCSD_Ethanol_exci_gaus.out', 'CCSD_Ethanol_gaus.out', 'CCSD_Ethanol_lsdal.out', 'CCSD_Ethanol_orca.out', 'CCSD_Methane_dal.out', 'CCSD_Methane_exci_gaus.out', 'CCSD_Methane_gaus.out', 'CCSD_Methane_lsdal.out', 'CCSD_Methane_orca.out', 'CCSD_Water_dal.out', 'CCSD_Water_exci_gaus.out', 'CCSD_Water_gaus.out', 'CCSD_Water_lsdal.out', 'CCSD_Water_orca.out', 'DFT_Ethanol_exci_dal.out', 'DFT_Ethanol_exci_lsdal.out', 'DFT_Ethanol_exci_orca.out', 'DFT_Ethanol_gaus.out', 'DFT_Ethanol_lsdal.out', 'DFT_Ethanol_opt_lsdal.out', 'DFT_Ethanol_orca.out', 'DFT_Ethanol_pol_lsdal.out', 'DFT_Ethanol_vib_dal.out', 'DFT_Methane_exci_dal.out', 'DFT_Methane_exci_lsdal.out', 'DFT_Methane_exci_orca.out', 'DFT_Methane_gaus.out', 'DFT_Methane_lsdal.out', 'DFT_Methane_opt_lsdal.out', 'DFT_Methane_orca.out', 'DFT_Methane_pol_lsdal.out', 'DFT_Methane_vib_dal.out', 'DFT_Water_exci_dal.out', 'DFT_Water_exci_lsdal.out', 'DFT_Water_exci_orca.out', 'DFT_Water_gaus.out', 'DFT_Water_lsdal.out', 'DFT_Water_opt_lsdal.out', 'DFT_Water_orca.out', 'DFT_Water_pol_lsdal.out', 'DFT_Water_vib_dal.out', 'HF_Ethanol_dal.out', 'HF_Ethanol_gaus.out', 'HF_Ethanol_lsdal.out', 'HF_Ethanol_opt_dal.out', 'HF_Methane_dal.out', 'HF_Methane_gaus.out', 'HF_Methane_lsdal.out', 'HF_Methane_opt_dal.out', 'HF_Water_dal.out', 'HF_Water_gaus.out', 'HF_Water_lsdal.out', 'HF_Water_opt_dal.out', 'MP2_Ethanol_dal.out', 'MP2_Ethanol_gaus.out', 'MP2_Ethanol_lsdal.out', 'MP2_Methane_dal.out', 'MP2_Methane_gaus.out', 'MP2_Methane_lsdal.out', 'MP2_Water_dal.out', 'MP2_Water_gaus.out', 'MP2_Water_lsdal.out', 'RIMP2_Ethanol_lsdal.out', 'RIMP2_Methane_lsdal.out', 'RIMP2_Water_lsdal.out']

        T = 298.15

        Arguments = {'_Energy': True}
        Values = [item[0] for item in Arguments.items() if not(item[1] == None or item[1] == False)]

        Energies = [-154.617099015, -154.091371684, -154.611657, -154.6170990695, -154.61859864, -40.3862774947, -40.198299952, -40.383848, -40.3862775152, -40.38650599, -76.240145954, -76.0262477907, -76.238206, -76.2401460108, -76.24028655, -154.946956931442, -154.963196684405, -154.684154856413, -155.04394, -154.963196684405, -154.964390379913, -154.94861604, -154.963196684405, -154.964264586297, -40.480214505714, -40.482212106515, -40.059783184651, -40.516349, -40.482212106515, -40.482312448697, -40.48046991, -40.482212106515, -40.482284723332, -76.383442689092, -76.39193683852, -76.106977806533, -76.420627, -76.39193683852, -76.391968171298, -76.38356619, -76.39193683852, -76.391927635725, -154.090952448863, -154.092719, -154.0909524455, -154.092719320913, -40.198706530389, -40.198712, -40.198706530311, -40.198711977799, -76.025988370566, -76.027053, -76.025988364833, -76.027053512728, -154.090952448869, -154.573768, -154.579935994, -40.198706530396, -40.360175, -40.3629239233, -76.02598837057, -76.228667, -76.2308197008, -154.5798695707, -40.3628734978, -76.2308044597]
        EnergyPairs = dict(zip(input_files, Energies))

        Extracted_Values = dict()
        for infile in input_files:
            file = f'test_systems/{infile}'
            Extracted_Values[infile] = op.Data_Extraction(file, Needed_Values=Values, NeededArguments=Arguments, quiet=True, Temperature=T)[file]

        op.Check_if_Implemented(input_files, {'_Energy': ['tot_energy']}, Extracted_Values)

        for infile in input_files:
            self.assertAlmostEqual(Extracted_Values[infile]['tot_energy'], EnergyPairs[infile])

    def test_ZPV_Extraction(self):

        input_files = ['CCSD_Ethanol_dal.out', 'CCSD_Ethanol_exci_gaus.out', 'CCSD_Ethanol_gaus.out', 'CCSD_Ethanol_lsdal.out', 'CCSD_Ethanol_orca.out', 'CCSD_Methane_dal.out', 'CCSD_Methane_exci_gaus.out', 'CCSD_Methane_gaus.out', 'CCSD_Methane_lsdal.out', 'CCSD_Methane_orca.out', 'CCSD_Water_dal.out', 'CCSD_Water_exci_gaus.out', 'CCSD_Water_gaus.out', 'CCSD_Water_lsdal.out', 'CCSD_Water_orca.out', 'DFT_Ethanol_exci_dal.out', 'DFT_Ethanol_exci_lsdal.out', 'DFT_Ethanol_exci_orca.out', 'DFT_Ethanol_gaus.out', 'DFT_Ethanol_lsdal.out', 'DFT_Ethanol_opt_lsdal.out', 'DFT_Ethanol_orca.out', 'DFT_Ethanol_pol_lsdal.out', 'DFT_Ethanol_vib_dal.out', 'DFT_Methane_exci_dal.out', 'DFT_Methane_exci_lsdal.out', 'DFT_Methane_exci_orca.out', 'DFT_Methane_gaus.out', 'DFT_Methane_lsdal.out', 'DFT_Methane_opt_lsdal.out', 'DFT_Methane_orca.out', 'DFT_Methane_pol_lsdal.out', 'DFT_Methane_vib_dal.out', 'DFT_Water_exci_dal.out', 'DFT_Water_exci_lsdal.out', 'DFT_Water_exci_orca.out', 'DFT_Water_gaus.out', 'DFT_Water_lsdal.out', 'DFT_Water_opt_lsdal.out', 'DFT_Water_orca.out', 'DFT_Water_pol_lsdal.out', 'DFT_Water_vib_dal.out', 'HF_Ethanol_dal.out', 'HF_Ethanol_gaus.out', 'HF_Ethanol_lsdal.out', 'HF_Ethanol_opt_dal.out', 'HF_Methane_dal.out', 'HF_Methane_gaus.out', 'HF_Methane_lsdal.out', 'HF_Methane_opt_dal.out', 'HF_Water_dal.out', 'HF_Water_gaus.out', 'HF_Water_lsdal.out', 'HF_Water_opt_dal.out', 'MP2_Ethanol_dal.out', 'MP2_Ethanol_gaus.out', 'MP2_Ethanol_lsdal.out', 'MP2_Methane_dal.out', 'MP2_Methane_gaus.out', 'MP2_Methane_lsdal.out', 'MP2_Water_dal.out', 'MP2_Water_gaus.out', 'MP2_Water_lsdal.out', 'RIMP2_Ethanol_lsdal.out', 'RIMP2_Methane_lsdal.out', 'RIMP2_Water_lsdal.out']

        T = 298.15

        Arguments = {'_ZPV': True}
        Values = [item[0] for item in Arguments.items() if not(item[1] == None or item[1] == False)]

        ZPVs = ['NaN', 'NaN', -154.530805, ['Not implemented'], -154.53762832, 'NaN', 'NaN', -40.338881, ['Not implemented'], -40.34142166, 'NaN', 'NaN', -76.216579, ['Not implemented'], -76.21864255, 'NaN', ['Not implemented'], 'NaN', -154.964526, ['Not implemented'], ['Not implemented'], -154.86929692, ['Not implemented'], 0.400099, 'NaN', ['Not implemented'], 'NaN', -40.47202, ['Not implemented'], ['Not implemented'], -40.4361688, ['Not implemented'], 0.141929, 'NaN', ['Not implemented'], 'NaN', -76.399521, ['Not implemented'], ['Not implemented'], -76.36248925, ['Not implemented'], 0.049552, 0.085383, -154.007553, ['Not implemented'], 0.085168, 0.046875, -40.151733, ['Not implemented'], 0.046969, 0.021735, -76.004038, ['Not implemented'], 0.023013, 'NaN', -154.49262, ['Not implemented'], 'NaN', -40.314805, ['Not implemented'], 'NaN', -76.207021, ['Not implemented'], ['Not implemented'], ['Not implemented'], ['Not implemented']]
        ZPVPairs = dict(zip(input_files, ZPVs))

        Extracted_Values = dict()
        for infile in input_files:
            file = f'test_systems/{infile}'
            Extracted_Values[infile] = op.Data_Extraction(file, Needed_Values=Values, NeededArguments=Arguments, quiet=True, Temperature=T)[file]

        op.Check_if_Implemented(input_files, {'_ZPV': ['zpv']}, Extracted_Values)

        for infile in input_files:
            self.assertAlmostEqual(Extracted_Values[infile]['zpv'], ZPVPairs[infile])


    def test_Dipole_Extraction(self):

        input_files = ['CCSD_Ethanol_dal.out', 'CCSD_Ethanol_exci_gaus.out', 'CCSD_Ethanol_gaus.out', 'CCSD_Ethanol_lsdal.out', 'CCSD_Ethanol_orca.out', 'CCSD_Methane_dal.out', 'CCSD_Methane_exci_gaus.out', 'CCSD_Methane_gaus.out', 'CCSD_Methane_lsdal.out', 'CCSD_Methane_orca.out', 'CCSD_Water_dal.out', 'CCSD_Water_exci_gaus.out', 'CCSD_Water_gaus.out', 'CCSD_Water_lsdal.out', 'CCSD_Water_orca.out', 'DFT_Ethanol_exci_dal.out', 'DFT_Ethanol_exci_lsdal.out', 'DFT_Ethanol_exci_orca.out', 'DFT_Ethanol_gaus.out', 'DFT_Ethanol_lsdal.out', 'DFT_Ethanol_opt_lsdal.out', 'DFT_Ethanol_orca.out', 'DFT_Ethanol_pol_lsdal.out', 'DFT_Ethanol_vib_dal.out', 'DFT_Methane_exci_dal.out', 'DFT_Methane_exci_lsdal.out', 'DFT_Methane_exci_orca.out', 'DFT_Methane_gaus.out', 'DFT_Methane_lsdal.out', 'DFT_Methane_opt_lsdal.out', 'DFT_Methane_orca.out', 'DFT_Methane_pol_lsdal.out', 'DFT_Methane_vib_dal.out', 'DFT_Water_exci_dal.out', 'DFT_Water_exci_lsdal.out', 'DFT_Water_exci_orca.out', 'DFT_Water_gaus.out', 'DFT_Water_lsdal.out', 'DFT_Water_opt_lsdal.out', 'DFT_Water_orca.out', 'DFT_Water_pol_lsdal.out', 'DFT_Water_vib_dal.out', 'HF_Ethanol_dal.out', 'HF_Ethanol_gaus.out', 'HF_Ethanol_lsdal.out', 'HF_Ethanol_opt_dal.out', 'HF_Methane_dal.out', 'HF_Methane_gaus.out', 'HF_Methane_lsdal.out', 'HF_Methane_opt_dal.out', 'HF_Water_dal.out', 'HF_Water_gaus.out', 'HF_Water_lsdal.out', 'HF_Water_opt_dal.out', 'MP2_Ethanol_dal.out', 'MP2_Ethanol_gaus.out', 'MP2_Ethanol_lsdal.out', 'MP2_Methane_dal.out', 'MP2_Methane_gaus.out', 'MP2_Methane_lsdal.out', 'MP2_Water_dal.out', 'MP2_Water_gaus.out', 'MP2_Water_lsdal.out', 'RIMP2_Ethanol_lsdal.out', 'RIMP2_Methane_lsdal.out', 'RIMP2_Water_lsdal.out']

        T = 298.15

        Arguments = {'_Dipole_moments': True}
        Values = [item[0] for item in Arguments.items() if not(item[1] == None or item[1] == False)]

        Dipoles = [['NaN','NaN','NaN','NaN'], [-0.773124,0.965782,-0.593757,1.37223], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [-0.36878,-0.38541,-0.27896,0.60196], ['NaN','NaN','NaN','NaN'], [-0.0990845,0.0539212,0.0641428,0.129767], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [0.0,0.0,-0.0,0.0], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [0.4471,0.29059,-0.56156,0.7744], [-0.36195505,-0.39332029,-0.26204355,0.595298], [-0.377532,-0.410115,-0.263096,0.616396], [-0.36191,-0.39317,-0.26215,0.59522], [-0.369592,-0.371447,-0.283829,0.595928], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [-0.37044,-0.36977,-0.28344,0.59523], [-0.377532,-0.410115,-0.263096,0.616396], [-0.38186013,-0.39502328,-0.28092818,0.617075], [4.9e-07,-4.3e-07,-1.51e-06,2e-06], [0.580424E-05,0.372527E-06,-0.150333E-05,0.600733E-05], [-2e-05,1e-05,-6e-05,6e-05], [0.0,0.0,0.0,0.0], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [-2e-05,2e-05,-6e-05,6e-05], [0.580424E-05,0.372527E-06,-0.150333E-05,0.600733E-05], [1.03e-06,2.34e-06,-9.4e-07,3e-06], [0.43629067,0.28356124,-0.54798749,0.755676], [0.444499,0.288892,-0.558314,0.769904], [0.43628,0.28353,-0.54798,0.75565], [0.440182,0.286092,-0.552878,0.762419], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [0.44003,0.28597,-0.55269,0.76215], [0.444499,0.288892,-0.558314,0.769904], [0.44935564,0.29205138,-0.56439485,0.778303], [-0.42504346,-0.48588596,-0.25496428,0.694085], [-0.394476,-0.449039,-0.28916,0.663973], ['NaN','NaN','NaN','NaN'], [-0.39538898,-0.44864748,-0.28876582,0.66408], [-5e-07,-5.7e-07,-1.77e-06,2e-06], [0.0,0.0,0.0,0.0], ['NaN','NaN','NaN','NaN'], [-8e-08,-9e-08,-3.4e-07,0.0], [0.47147393,0.30642812,-0.59217818,0.816615], [0.464007,0.301577,-0.582803,0.803686], ['NaN','NaN','NaN','NaN'], [0.46433516,0.30178997,-0.58321487,0.804254], ['NaN','NaN','NaN','NaN'], [-0.383475,-0.398594,-0.281617,0.620676], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [0.0,0.0,0.0,0.0], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [0.454782,0.295581,-0.571216,0.787708], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN']]
        DipolePairs = dict(zip(input_files, Dipoles))

        Extracted_Values = dict()
        for infile in input_files:
            file = f'test_systems/{infile}'
            Extracted_Values[infile] = op.Data_Extraction(file, Needed_Values=Values, NeededArguments=Arguments, quiet=True, Temperature=T)[file]

        op.Check_if_Implemented(input_files, {'_Dipole_moments': ['total_dipole']}, Extracted_Values)

        for infile in input_files:
            self.assertAlmostEqual([Extracted_Values[infile]['dipolex'],Extracted_Values[infile]['dipoley'],Extracted_Values[infile]['dipolez'],Extracted_Values[infile]['total_dipole']], DipolePairs[infile])

    def test_Polarizability_Extraction(self):

        input_files = ['CCSD_Ethanol_dal.out', 'CCSD_Ethanol_exci_gaus.out', 'CCSD_Ethanol_gaus.out', 'CCSD_Ethanol_lsdal.out', 'CCSD_Ethanol_orca.out', 'CCSD_Methane_dal.out', 'CCSD_Methane_exci_gaus.out', 'CCSD_Methane_gaus.out', 'CCSD_Methane_lsdal.out', 'CCSD_Methane_orca.out', 'CCSD_Water_dal.out', 'CCSD_Water_exci_gaus.out', 'CCSD_Water_gaus.out', 'CCSD_Water_lsdal.out', 'CCSD_Water_orca.out', 'DFT_Ethanol_exci_dal.out', 'DFT_Ethanol_exci_lsdal.out', 'DFT_Ethanol_exci_orca.out', 'DFT_Ethanol_gaus.out', 'DFT_Ethanol_lsdal.out', 'DFT_Ethanol_opt_lsdal.out', 'DFT_Ethanol_orca.out', 'DFT_Ethanol_pol_lsdal.out', 'DFT_Ethanol_vib_dal.out', 'DFT_Methane_exci_dal.out', 'DFT_Methane_exci_lsdal.out', 'DFT_Methane_exci_orca.out', 'DFT_Methane_gaus.out', 'DFT_Methane_lsdal.out', 'DFT_Methane_opt_lsdal.out', 'DFT_Methane_orca.out', 'DFT_Methane_pol_lsdal.out', 'DFT_Methane_vib_dal.out', 'DFT_Water_exci_dal.out', 'DFT_Water_exci_lsdal.out', 'DFT_Water_exci_orca.out', 'DFT_Water_gaus.out', 'DFT_Water_lsdal.out', 'DFT_Water_opt_lsdal.out', 'DFT_Water_orca.out', 'DFT_Water_pol_lsdal.out', 'DFT_Water_vib_dal.out', 'HF_Ethanol_dal.out', 'HF_Ethanol_gaus.out', 'HF_Ethanol_lsdal.out', 'HF_Ethanol_opt_dal.out', 'HF_Methane_dal.out', 'HF_Methane_gaus.out', 'HF_Methane_lsdal.out', 'HF_Methane_opt_dal.out', 'HF_Water_dal.out', 'HF_Water_gaus.out', 'HF_Water_lsdal.out', 'HF_Water_opt_dal.out', 'MP2_Ethanol_dal.out', 'MP2_Ethanol_gaus.out', 'MP2_Ethanol_lsdal.out', 'MP2_Methane_dal.out', 'MP2_Methane_gaus.out', 'MP2_Methane_lsdal.out', 'MP2_Water_dal.out', 'MP2_Water_gaus.out', 'MP2_Water_lsdal.out', 'RIMP2_Ethanol_lsdal.out', 'RIMP2_Methane_lsdal.out', 'RIMP2_Water_lsdal.out']

        T = 298.15

        Arguments = {'_Polarizabilities': True}
        Values = [item[0] for item in Arguments.items() if not(item[1] == None or item[1] == False)]

        Polarizabilities = [['NaN','NaN','NaN','NaN'], [62.5029,56.8779,33.4058,50.9289], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [433.645,407.6,432.89,424.712], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [28.3496,27.4184,28.3147,28.0276], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [27.242992,26.361063,27.878269,27.160774], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [13.4138,13.4138,13.4138,13.4138], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [13.187139,13.187188,13.187109,13.187145], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [6.79959,3.8347,5.56279,5.39903], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [6.7488344,3.7931601,5.4889452,5.3436466], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [26.1169,25.4549,26.5574,26.0431], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [13.0042,13.0042,13.0042,13.0042], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [6.1205,3.57294,5.01855,4.904], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [27.3907,26.6863,27.5244,27.2005], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [13.1826,13.1826,13.1826,13.1826], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], [6.51208,3.75936,5.38371,5.21838], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN']]
        PolarizabilityPairs = dict(zip(input_files, Polarizabilities))

        Extracted_Values = dict()
        for infile in input_files:
            file = f'test_systems/{infile}'
            Extracted_Values[infile] = op.Data_Extraction(file, Needed_Values=Values, NeededArguments=Arguments, quiet=True, Temperature=T)[file]

        op.Check_if_Implemented(input_files, {'_Polarizabilities': ['iso_polar']}, Extracted_Values)

        for infile in input_files:
            self.assertAlmostEqual([Extracted_Values[infile]['polx'],Extracted_Values[infile]['poly'],Extracted_Values[infile]['polz'],Extracted_Values[infile]['iso_polar']], PolarizabilityPairs[infile])

    def test_Excitation_Extraction(self):

        input_files = ['CCSD_Ethanol_dal.out', 'CCSD_Ethanol_exci_gaus.out', 'CCSD_Ethanol_gaus.out', 'CCSD_Ethanol_lsdal.out', 'CCSD_Ethanol_orca.out', 'CCSD_Methane_dal.out', 'CCSD_Methane_exci_gaus.out', 'CCSD_Methane_gaus.out', 'CCSD_Methane_lsdal.out', 'CCSD_Methane_orca.out', 'CCSD_Water_dal.out', 'CCSD_Water_exci_gaus.out', 'CCSD_Water_gaus.out', 'CCSD_Water_lsdal.out', 'CCSD_Water_orca.out', 'DFT_Ethanol_exci_dal.out', 'DFT_Ethanol_exci_lsdal.out', 'DFT_Ethanol_exci_orca.out', 'DFT_Ethanol_gaus.out', 'DFT_Ethanol_lsdal.out', 'DFT_Ethanol_opt_lsdal.out', 'DFT_Ethanol_orca.out', 'DFT_Ethanol_pol_lsdal.out', 'DFT_Ethanol_vib_dal.out', 'DFT_Methane_exci_dal.out', 'DFT_Methane_exci_lsdal.out', 'DFT_Methane_exci_orca.out', 'DFT_Methane_gaus.out', 'DFT_Methane_lsdal.out', 'DFT_Methane_opt_lsdal.out', 'DFT_Methane_orca.out', 'DFT_Methane_pol_lsdal.out', 'DFT_Methane_vib_dal.out', 'DFT_Water_exci_dal.out', 'DFT_Water_exci_lsdal.out', 'DFT_Water_exci_orca.out', 'DFT_Water_gaus.out', 'DFT_Water_lsdal.out', 'DFT_Water_opt_lsdal.out', 'DFT_Water_orca.out', 'DFT_Water_pol_lsdal.out', 'DFT_Water_vib_dal.out', 'HF_Ethanol_dal.out', 'HF_Ethanol_gaus.out', 'HF_Ethanol_lsdal.out', 'HF_Ethanol_opt_dal.out', 'HF_Methane_dal.out', 'HF_Methane_gaus.out', 'HF_Methane_lsdal.out', 'HF_Methane_opt_dal.out', 'HF_Water_dal.out', 'HF_Water_gaus.out', 'HF_Water_lsdal.out', 'HF_Water_opt_dal.out', 'MP2_Ethanol_dal.out', 'MP2_Ethanol_gaus.out', 'MP2_Ethanol_lsdal.out', 'MP2_Methane_dal.out', 'MP2_Methane_gaus.out', 'MP2_Methane_lsdal.out', 'MP2_Water_dal.out', 'MP2_Water_gaus.out', 'MP2_Water_lsdal.out', 'RIMP2_Ethanol_lsdal.out', 'RIMP2_Methane_lsdal.out', 'RIMP2_Water_lsdal.out']

        T = 298.15

        Arguments = {'_Excitation_energies': -1}
        Values = [item[0] for item in Arguments.items() if not(item[1] == None or item[1] == False)]

        Excitations = [['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.2898535857609992,0.35442596611177213,0.36654959497621925,0.3834910708977413,0.3886359876634964,0.405390041617123,0.41815311013674256,0.42807177467300894,0.43271689952437636,0.4351827846313918,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.44713001634958444,0.44718146551724197,0.4472108650416177,0.5084427244351969,0.5086007468787165,0.5087183449762195,0.5195924940546974,0.5196071938168854,0.5250681554696797,0.525141654280619,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.2979494797859695,0.37327106123662357,0.3998886556183121,0.47703300758026224,0.5370043623662314,0.6516147332045193,0.7847431294589784,0.8635448796076112,0.915883382877528,0.9624265049048765,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.26233187,0.3086786,0.32464196,0.33014722,0.34362636,0.36064749,0.36516853,0.376727,0.37797076,0.38648229,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.27110194,0.33033293,0.33713851,0.35547704,0.36511551,0.37975082,0.39283077,0.39799692,0.40417535,0.40576522,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.262977,0.309251,0.325477,0.330468,0.344234,0.360947,0.365908,0.377079,0.378062,0.386847,0.246037,0.297392,0.305966,0.322671,0.329569,0.345966,0.351219,0.362152,0.370791,0.371954], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.42000093,0.42000159,0.4200031,0.47631633,0.47631756,0.47631799,0.48260977,0.48261094,0.49714235,0.4971432,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.42864727,0.42864786,0.42864949,0.48676442,0.48676569,0.48676618,0.49351444,0.49351565,0.50416793,0.50416873,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.420522,0.420657,0.420804,0.476042,0.476073,0.476141,0.482714,0.482733,0.499294,0.499325,0.390352,0.39045,0.390587,0.423733,0.447913,0.44792,0.44794,0.462897,0.4629,0.470233], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.27555143,0.34364403,0.36279887,0.43457698,0.507953,0.61502045,0.75700342,0.821816,0.87448392,0.90361358,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.2787964,0.34909377,0.36635896,0.44063713,0.50928108,0.62036953,0.76402649,0.83036529,0.88238729,0.91292131,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.276548,0.343606,0.365077,0.436356,0.50964,0.623718,0.75689,0.823283,0.878281,0.904713,0.249802,0.326029,0.327236,0.397386,0.464616,0.526309,0.742993,0.789199,0.798129,0.844071], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN']]
        ExcitationPairs = dict(zip(input_files, Excitations))

        Extracted_Values = dict()
        for infile in input_files:
            file = f'test_systems/{infile}'
            Extracted_Values[infile] = op.Data_Extraction(file, Needed_Values=Values, NeededArguments=Arguments, quiet=True, Temperature=T)[file]

        op.Check_if_Implemented(input_files, {'_Excitation_energies': ['exc_energies']}, Extracted_Values)

        for key_outer in Extracted_Values.keys():   # Turn everything into lists
            for key_inner in Extracted_Values[key_outer].keys():
                if type(Extracted_Values[key_outer][key_inner]) != list:
                    Extracted_Values[key_outer][key_inner] = [Extracted_Values[key_outer][key_inner]]

        Extracted_Values = op.Collect_and_sort_data(input_files, {'_Excitation_energies': ['exc_energies']}, Extracted_Values)
        op.Resize(Extracted_Values['exc_energies'])


        for i, infile in enumerate(input_files):
            self.assertListEqual(Extracted_Values['exc_energies'][i], ExcitationPairs[infile])

    def test_Oscillator_Extraction(self):

        input_files = ['CCSD_Ethanol_dal.out', 'CCSD_Ethanol_exci_gaus.out', 'CCSD_Ethanol_gaus.out', 'CCSD_Ethanol_lsdal.out', 'CCSD_Ethanol_orca.out', 'CCSD_Methane_dal.out', 'CCSD_Methane_exci_gaus.out', 'CCSD_Methane_gaus.out', 'CCSD_Methane_lsdal.out', 'CCSD_Methane_orca.out', 'CCSD_Water_dal.out', 'CCSD_Water_exci_gaus.out', 'CCSD_Water_gaus.out', 'CCSD_Water_lsdal.out', 'CCSD_Water_orca.out', 'DFT_Ethanol_exci_dal.out', 'DFT_Ethanol_exci_lsdal.out', 'DFT_Ethanol_exci_orca.out', 'DFT_Ethanol_gaus.out', 'DFT_Ethanol_lsdal.out', 'DFT_Ethanol_opt_lsdal.out', 'DFT_Ethanol_orca.out', 'DFT_Ethanol_pol_lsdal.out', 'DFT_Ethanol_vib_dal.out', 'DFT_Methane_exci_dal.out', 'DFT_Methane_exci_lsdal.out', 'DFT_Methane_exci_orca.out', 'DFT_Methane_gaus.out', 'DFT_Methane_lsdal.out', 'DFT_Methane_opt_lsdal.out', 'DFT_Methane_orca.out', 'DFT_Methane_pol_lsdal.out', 'DFT_Methane_vib_dal.out', 'DFT_Water_exci_dal.out', 'DFT_Water_exci_lsdal.out', 'DFT_Water_exci_orca.out', 'DFT_Water_gaus.out', 'DFT_Water_lsdal.out', 'DFT_Water_opt_lsdal.out', 'DFT_Water_orca.out', 'DFT_Water_pol_lsdal.out', 'DFT_Water_vib_dal.out', 'HF_Ethanol_dal.out', 'HF_Ethanol_gaus.out', 'HF_Ethanol_lsdal.out', 'HF_Ethanol_opt_dal.out', 'HF_Methane_dal.out', 'HF_Methane_gaus.out', 'HF_Methane_lsdal.out', 'HF_Methane_opt_dal.out', 'HF_Water_dal.out', 'HF_Water_gaus.out', 'HF_Water_lsdal.out', 'HF_Water_opt_dal.out', 'MP2_Ethanol_dal.out', 'MP2_Ethanol_gaus.out', 'MP2_Ethanol_lsdal.out', 'MP2_Methane_dal.out', 'MP2_Methane_gaus.out', 'MP2_Methane_lsdal.out', 'MP2_Water_dal.out', 'MP2_Water_gaus.out', 'MP2_Water_lsdal.out', 'RIMP2_Ethanol_lsdal.out', 'RIMP2_Methane_lsdal.out', 'RIMP2_Water_lsdal.out']

        T = 298.15

        Arguments = {'_Excitation_energies': -1, '_Oscillator_strengths': True}
        Values = [item[0] for item in Arguments.items() if not(item[1] == None or item[1] == False)]

        Oscillations = [['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.0053,0.0279,0.0135,0.0117,0.1488,0.0116,0.0455,0.1629,0.239,0.0181,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.2615,0.2648,0.2667,0.0001,0.0002,0.0001,0.0006,0.0003,0.423,0.4246,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.0263,0.0,0.0998,0.0771,0.2915,0.1331,0.0,0.067,0.1424,0.0018,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.004388565056954431,0.009794412783283694,0.008901013707045971,0.02571750040649076,0.04459714834636055,0.01863295889091787,0.017331182970966818,0.038452846496895364,0.00421762118269334,0.0419196231217537,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.00412468,0.0145915,0.01463591,0.02976204,0.08247615,0.01238869,0.04696234,0.09048642,0.01088242,0.07896939,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.006543622,0.014015375,0.012451245,0.038290463,0.068809064,0.032946535,0.023405602,0.046680976,0.009061842,0.071338142,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.10008204678645957,0.1279273667786754,0.10863383535694181,1.011189650589288e-10,1.0182022575370333e-10,1.5770266665766547e-10,4.701875464091339e-10,3.8454958879093524e-10,0.33803812977659714,0.32309262312159104,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.18894602,0.18894535,0.18894424,0.0,0.0,0.0,0.0,0.0,0.44804921,0.44804337,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.168122337,0.167189804,0.165864592,3.63e-07,2.76e-07,3.6e-08,3.44e-07,5.769e-06,0.526017428,0.527201774,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.018140512800822413,7.48864165170827e-12,0.05204113016696135,0.04144082862649539,0.2079890206718361,0.07883186460739729,4.27538916396409e-11,0.05163258541183504,0.08638858449873771,0.0020253736728362212,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.02214886,0.0,0.08071307,0.056595,0.28848081,0.12494654,0.0,0.06435942,0.1236291,0.00323636,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.022137793,4.79e-07,0.089172547,0.065133306,0.320914299,0.149367545,4.4e-08,0.069924455,0.145037747,0.002616461,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN']]
        OscillatorPairs = dict(zip(input_files, Oscillations))

        Extracted_Values = dict()
        for infile in input_files:
            file = f'test_systems/{infile}'
            Extracted_Values[infile] = op.Data_Extraction(file, Needed_Values=Values, NeededArguments=Arguments, quiet=True, Temperature=T)[file]

        op.Check_if_Implemented(input_files, {'_Oscillator_strengths': ['osc_strengths']}, Extracted_Values)

        for key_outer in Extracted_Values.keys():   # Turn everything into lists
            for key_inner in Extracted_Values[key_outer].keys():
                if type(Extracted_Values[key_outer][key_inner]) != list:
                    Extracted_Values[key_outer][key_inner] = [Extracted_Values[key_outer][key_inner]]

        Extracted_Values = op.Collect_and_sort_data(input_files, {'_Oscillator_strengths': ['osc_strengths']}, Extracted_Values)
        op.Resize(Extracted_Values['osc_strengths'])

        for i, infile in enumerate(input_files):
            self.assertListEqual(Extracted_Values['osc_strengths'][i], OscillatorPairs[infile])

    def test_Frequency_Extraction(self):

        input_files = ['CCSD_Ethanol_dal.out', 'CCSD_Ethanol_exci_gaus.out', 'CCSD_Ethanol_gaus.out', 'CCSD_Ethanol_lsdal.out', 'CCSD_Ethanol_orca.out', 'CCSD_Methane_dal.out', 'CCSD_Methane_exci_gaus.out', 'CCSD_Methane_gaus.out', 'CCSD_Methane_lsdal.out', 'CCSD_Methane_orca.out', 'CCSD_Water_dal.out', 'CCSD_Water_exci_gaus.out', 'CCSD_Water_gaus.out', 'CCSD_Water_lsdal.out', 'CCSD_Water_orca.out', 'DFT_Ethanol_exci_dal.out', 'DFT_Ethanol_exci_lsdal.out', 'DFT_Ethanol_exci_orca.out', 'DFT_Ethanol_gaus.out', 'DFT_Ethanol_lsdal.out', 'DFT_Ethanol_opt_lsdal.out', 'DFT_Ethanol_orca.out', 'DFT_Ethanol_pol_lsdal.out', 'DFT_Ethanol_vib_dal.out', 'DFT_Methane_exci_dal.out', 'DFT_Methane_exci_lsdal.out', 'DFT_Methane_exci_orca.out', 'DFT_Methane_gaus.out', 'DFT_Methane_lsdal.out', 'DFT_Methane_opt_lsdal.out', 'DFT_Methane_orca.out', 'DFT_Methane_pol_lsdal.out', 'DFT_Methane_vib_dal.out', 'DFT_Water_exci_dal.out', 'DFT_Water_exci_lsdal.out', 'DFT_Water_exci_orca.out', 'DFT_Water_gaus.out', 'DFT_Water_lsdal.out', 'DFT_Water_opt_lsdal.out', 'DFT_Water_orca.out', 'DFT_Water_pol_lsdal.out', 'DFT_Water_vib_dal.out', 'HF_Ethanol_dal.out', 'HF_Ethanol_gaus.out', 'HF_Ethanol_lsdal.out', 'HF_Ethanol_opt_dal.out', 'HF_Methane_dal.out', 'HF_Methane_gaus.out', 'HF_Methane_lsdal.out', 'HF_Methane_opt_dal.out', 'HF_Water_dal.out', 'HF_Water_gaus.out', 'HF_Water_lsdal.out', 'HF_Water_opt_dal.out', 'MP2_Ethanol_dal.out', 'MP2_Ethanol_gaus.out', 'MP2_Ethanol_lsdal.out', 'MP2_Methane_dal.out', 'MP2_Methane_gaus.out', 'MP2_Methane_lsdal.out', 'MP2_Water_dal.out', 'MP2_Water_gaus.out', 'MP2_Water_lsdal.out', 'RIMP2_Ethanol_lsdal.out', 'RIMP2_Methane_lsdal.out', 'RIMP2_Water_lsdal.out']

        T = 298.15

        Arguments = {'_Frequencies': -1}
        Values = [item[0] for item in Arguments.items() if not(item[1] == None or item[1] == False)]

        Frequencies = [['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.0012630630662920682,0.0014938355243345979,0.001933671325406055,0.003676697837466889,0.004139563179512352,0.004928617018962695,0.0051053636428426965,0.005260731486015959,0.00589351304974252,0.0063435400059058894,0.006444397220844203,0.006600079451150896,0.006783219980311212,0.00681406181373418,0.006941001769908982,0.013767967580753103,0.013916744684962512,0.014183050634852538,0.014292572632568288,0.014377474928301815,0.017544563524584583], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], [0.0012666156408998224,0.0014941134607858908,0.0019372626288635796,0.003682339036161079,0.00414562720611933,0.0049349667277909185,0.005112982746676333,0.005266895751998812,0.005900226354125059,0.006351349108920164,0.0064524541884970095,0.006608007474515642,0.006793040249712383,0.006824205582939314,0.006951236210185931,0.013791115586444054,0.01394010774967807,0.014206698926155817,0.01431937709731108,0.014403805989810357,0.017558202458573105], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.006120630871267313,0.006120639983937847,0.006120644995906641,0.007098446846330514,0.007098457325901628,0.013891936806333759,0.014494520802444118,0.01449453037074818,0.01449454586228809,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], [0.006121481994695206,0.0061215731214005475,0.006121618684753219,0.00710801970672668,0.007108156396784693,0.013939560989446018,0.014549335338241383,0.014549426464946724,0.014549472028299393,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.0077298870249544425,0.017524957613930272,0.01799954640661797,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], [0.00773524481959502,0.017538154583397886,0.01801461056227804,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.0012403346990792167,0.0014451683960796996,0.0019088474996038665,0.003665921648926682,0.004060324864149351,0.004837447028435751,0.004946697468569583,0.005153911850747123,0.005802477015472429,0.00623242693591487,0.0063172258028378345,0.0064468881693347255,0.006650312591837096,0.006681841520618341,0.006803587710222181,0.013510562431807347,0.013754925071051043,0.013962698515565855,0.014084758636669597,0.014174495204121514,0.01714641363487178], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], [0.001233217703392014,0.001428775613055744,0.0019059150422259638,0.0036613798939324413,0.0040552750777728295,0.004831993550754565,0.004941983484102247,0.005149843498987133,0.005797298740441375,0.00622732566294983,0.006312711385855196,0.006441108913681942,0.006645050480237127,0.006676170250111388,0.006798006655153516,0.013495044920788202,0.013740175758157927,0.013945620915351255,0.014067275066982698,0.014157900575445225,0.01712617074854713], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], [0.090728,0.064494,0.054928,0.049596,0.046161,0.045284,0.044759,0.04422,0.04198,0.041465,0.040145,0.039415,0.033141,0.029428,0.026396,0.022245,0.021607,0.019976,0.018015,0.014394,0.011821], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.0059706800550931,0.005970746577587999,0.005970874154975478,0.006976828234114152,0.006976933485458822,0.013783120129317355,0.0143362929476237,0.014336447407389255,0.01433648795877313,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], [0.005962784837342277,0.005963149344163645,0.005963832794453709,0.006970463945013073,0.0069708284518344415,0.013779360241454947,0.014328990964724652,0.01433031230195211,0.014332453779527646,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], [0.062361,0.045808,0.039808,0.036743,0.034482,0.024005,0.015067,0.015048,0.010536,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.007557548199811829,0.017096343610988142,0.01755846444785096,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'],
                       ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], [0.007554631689607362,0.017069535501177135,0.01752967979980109,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], [0.057796,0.025785,0.015523,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.017205,0.014777,0.014758,0.014631,0.014449,0.014378,0.007407,0.007282,0.00722,0.007076,0.006949,0.006795,0.006319,0.00565,0.005383,0.005193,0.004399,0.003996,0.003191,0.002156,0.001549], [0.001303337424984977,0.001498680731257627,0.002057785898081731,0.003919119477886801,0.004374468233642137,0.0051999668319933955,0.005429182845908685,0.0056066662292013755,0.006285556538930361,0.0067606766003102045,0.006870372650033157,0.007064216922002933,0.007216962138596456,0.007262739639024962,0.007412409784946722,0.014363350744607345,0.014445074996492073,0.014706369888855347,0.014816592650935177,0.014864285179076444,0.018873962731663817], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], [0.018874,0.014865,0.014817,0.014707,0.014446,0.014364,0.007412,0.007263,0.007217,0.007064,0.00687,0.00676,0.006285,0.005607,0.00543,0.0052,0.004375,0.003919,0.00206,0.001498,0.001303], [0.01491,0.01491,0.01491,0.014365,0.007512,0.007512,0.006544,0.006544,0.006544,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.006529136855408696,0.0065291382223092755,0.006529139589209856,0.007507822179240858,0.007507823090507911,0.01442557752661712,0.0149764872131963,0.0149764940476992,0.014976500426568572,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], [0.01497,0.01497,0.01497,0.01442,0.007508,0.007508,0.00653,0.00653,0.00653,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.017793,0.017334,0.008343,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.008085524028457611,0.01874658718983748,0.019198131861278323,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], [0.019192,0.018744,0.008091,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.0012935157886832262,0.0015098123139486675,0.0019312045254924494,0.0036846490981414966,0.0041389298489102255,0.004918583968704551,0.005094601578941817,0.005245309202403894,0.005887254923253165,0.006312675846440112,0.006400833643721979,0.006550515636115434,0.0067796532810641295,0.006814835023829006,0.0069371730813840415,0.013880435704852555,0.01402932443927601,0.014341483980393501,0.014468393409122014,0.014557805109869386,0.01751826435742291], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.006102662507507996,0.006102664785675629,0.006102666608209736,0.007133424465275424,0.007133425832176004,0.014025020980616238,0.014713146981931626,0.014713151538266894,0.01471315746150274,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], ['NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], [0.0076441117353837395,0.01755165637169487,0.018095392108396006,'NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented'], ['Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented','Not implemented']]
        FrequencyPairs = dict(zip(input_files, Frequencies))

        Extracted_Values = dict()
        for infile in input_files:
            file = f'test_systems/{infile}'
            Extracted_Values[infile] = op.Data_Extraction(file, Needed_Values=Values, NeededArguments=Arguments, quiet=True, Temperature=T)[file]

        op.Check_if_Implemented(input_files, {'_Frequencies': ['freq']}, Extracted_Values)

        for key_outer in Extracted_Values.keys():   # Turn everything into lists
            for key_inner in Extracted_Values[key_outer].keys():
                if type(Extracted_Values[key_outer][key_inner]) != list:
                    Extracted_Values[key_outer][key_inner] = [Extracted_Values[key_outer][key_inner]]

        Extracted_Values = op.Collect_and_sort_data(input_files, {'_Frequencies': ['freq']}, Extracted_Values)
        op.Resize(Extracted_Values['freq'])

        for i, infile in enumerate(input_files):
            self.assertListEqual(Extracted_Values['freq'][i], FrequencyPairs[infile])

    def test_Enthalpy(self):

        input_files = ['CCSD_Ethanol_dal.out', 'CCSD_Ethanol_exci_gaus.out', 'CCSD_Ethanol_gaus.out', 'CCSD_Ethanol_lsdal.out', 'CCSD_Ethanol_orca.out', 'CCSD_Methane_dal.out', 'CCSD_Methane_exci_gaus.out', 'CCSD_Methane_gaus.out', 'CCSD_Methane_lsdal.out', 'CCSD_Methane_orca.out', 'CCSD_Water_dal.out', 'CCSD_Water_exci_gaus.out', 'CCSD_Water_gaus.out', 'CCSD_Water_lsdal.out', 'CCSD_Water_orca.out', 'DFT_Ethanol_exci_dal.out', 'DFT_Ethanol_exci_lsdal.out', 'DFT_Ethanol_exci_orca.out', 'DFT_Ethanol_gaus.out', 'DFT_Ethanol_lsdal.out', 'DFT_Ethanol_opt_lsdal.out', 'DFT_Ethanol_orca.out', 'DFT_Ethanol_pol_lsdal.out', 'DFT_Ethanol_vib_dal.out', 'DFT_Methane_exci_dal.out', 'DFT_Methane_exci_lsdal.out', 'DFT_Methane_exci_orca.out', 'DFT_Methane_gaus.out', 'DFT_Methane_lsdal.out', 'DFT_Methane_opt_lsdal.out', 'DFT_Methane_orca.out', 'DFT_Methane_pol_lsdal.out', 'DFT_Methane_vib_dal.out', 'DFT_Water_exci_dal.out', 'DFT_Water_exci_lsdal.out', 'DFT_Water_exci_orca.out', 'DFT_Water_gaus.out', 'DFT_Water_lsdal.out', 'DFT_Water_opt_lsdal.out', 'DFT_Water_orca.out', 'DFT_Water_pol_lsdal.out', 'DFT_Water_vib_dal.out', 'HF_Ethanol_dal.out', 'HF_Ethanol_gaus.out', 'HF_Ethanol_lsdal.out', 'HF_Ethanol_opt_dal.out', 'HF_Methane_dal.out', 'HF_Methane_gaus.out', 'HF_Methane_lsdal.out', 'HF_Methane_opt_dal.out', 'HF_Water_dal.out', 'HF_Water_gaus.out', 'HF_Water_lsdal.out', 'HF_Water_opt_dal.out', 'MP2_Ethanol_dal.out', 'MP2_Ethanol_gaus.out', 'MP2_Ethanol_lsdal.out', 'MP2_Methane_dal.out', 'MP2_Methane_gaus.out', 'MP2_Methane_lsdal.out', 'MP2_Water_dal.out', 'MP2_Water_gaus.out', 'MP2_Water_lsdal.out', 'RIMP2_Ethanol_lsdal.out', 'RIMP2_Methane_lsdal.out', 'RIMP2_Water_lsdal.out']

        T = 298.15

        Arguments = {'_Energy': True, '_Frequencies': -1, '_Enthalpy': True}
        Values = [item[0] for item in Arguments.items() if not(item[1] == None or item[1] == False)]

        Enthalpies = ['NaN', 'NaN', -154.52566064469565, ['Not implemented'], -154.53248701964583, 'NaN', 'NaN', -40.33506821290447, ['Not implemented'], -40.337609149443004, 'NaN', 'NaN', -76.21279991181812, ['Not implemented'], -76.21486366305679, 'NaN', ['Not implemented'], 'NaN', -154.95934041097973, ['Not implemented'], ['Not implemented'], -154.86410285555365, ['Not implemented'], -154.56038877841905, 'NaN', ['Not implemented'], 'NaN', -40.4682022302921, ['Not implemented'], ['Not implemented'], -40.43235099125042, ['Not implemented'], -40.33657882247748, 'NaN', ['Not implemented'], 'NaN', -76.39574155566171, ['Not implemented'], ['Not implemented'], -76.35870999344932, ['Not implemented'], -76.33859889244732, -154.0008789398892, -154.00250005079639, ['Not implemented'], -154.00249842271637, -40.14802980781707, -40.14793143737707, ['Not implemented'], -40.1479424907723, -76.0004754165776, -76.0002595934421, ['Not implemented'], -76.0002617356017, 'NaN', -154.48748709124328, ['Not implemented'], 'NaN', -40.31099251843578, ['Not implemented'], 'NaN', -76.20324234869736, ['Not implemented'], ['Not implemented'], ['Not implemented'], ['Not implemented']]
        EnthalpyPairs = dict(zip(input_files, Enthalpies))

        Extracted_Values = dict()
        for infile in input_files:
            file = f'test_systems/{infile}'
            Extracted_Values[infile] = op.Data_Extraction(file, Needed_Values=Values, NeededArguments=Arguments, quiet=True, Temperature=T)[file]

        op.Check_if_Implemented(input_files, {'_Enthalpy': ['enthalpy']}, Extracted_Values)

        for infile in input_files:
            self.assertAlmostEqual(Extracted_Values[infile]['enthalpy'], EnthalpyPairs[infile])

    def test_Entropy_Extraction(self):

        input_files = ['CCSD_Ethanol_dal.out', 'CCSD_Ethanol_exci_gaus.out', 'CCSD_Ethanol_gaus.out', 'CCSD_Ethanol_lsdal.out', 'CCSD_Ethanol_orca.out', 'CCSD_Methane_dal.out', 'CCSD_Methane_exci_gaus.out', 'CCSD_Methane_gaus.out', 'CCSD_Methane_lsdal.out', 'CCSD_Methane_orca.out', 'CCSD_Water_dal.out', 'CCSD_Water_exci_gaus.out', 'CCSD_Water_gaus.out', 'CCSD_Water_lsdal.out', 'CCSD_Water_orca.out', 'DFT_Ethanol_exci_dal.out', 'DFT_Ethanol_exci_lsdal.out', 'DFT_Ethanol_exci_orca.out', 'DFT_Ethanol_gaus.out', 'DFT_Ethanol_lsdal.out', 'DFT_Ethanol_opt_lsdal.out', 'DFT_Ethanol_orca.out', 'DFT_Ethanol_pol_lsdal.out', 'DFT_Ethanol_vib_dal.out', 'DFT_Methane_exci_dal.out', 'DFT_Methane_exci_lsdal.out', 'DFT_Methane_exci_orca.out', 'DFT_Methane_gaus.out', 'DFT_Methane_lsdal.out', 'DFT_Methane_opt_lsdal.out', 'DFT_Methane_orca.out', 'DFT_Methane_pol_lsdal.out', 'DFT_Methane_vib_dal.out', 'DFT_Water_exci_dal.out', 'DFT_Water_exci_lsdal.out', 'DFT_Water_exci_orca.out', 'DFT_Water_gaus.out', 'DFT_Water_lsdal.out', 'DFT_Water_opt_lsdal.out', 'DFT_Water_orca.out', 'DFT_Water_pol_lsdal.out', 'DFT_Water_vib_dal.out', 'HF_Ethanol_dal.out', 'HF_Ethanol_gaus.out', 'HF_Ethanol_lsdal.out', 'HF_Ethanol_opt_dal.out', 'HF_Methane_dal.out', 'HF_Methane_gaus.out', 'HF_Methane_lsdal.out', 'HF_Methane_opt_dal.out', 'HF_Water_dal.out', 'HF_Water_gaus.out', 'HF_Water_lsdal.out', 'HF_Water_opt_dal.out', 'MP2_Ethanol_dal.out', 'MP2_Ethanol_gaus.out', 'MP2_Ethanol_lsdal.out', 'MP2_Methane_dal.out', 'MP2_Methane_gaus.out', 'MP2_Methane_lsdal.out', 'MP2_Water_dal.out', 'MP2_Water_gaus.out', 'MP2_Water_lsdal.out', 'RIMP2_Ethanol_lsdal.out', 'RIMP2_Methane_lsdal.out', 'RIMP2_Water_lsdal.out']

        T = 298.15

        Arguments = {'_Frequencies': -1, '_Entropy': True}
        Values = [item[0] for item in Arguments.items() if not(item[1] == None or item[1] == False)]

        Entropies = ['NaN', 'NaN', 0.26830166298605285, ['Not implemented'], 0.26824821700525214, 'NaN', 'NaN', 0.20712389898812103, ['Not implemented'], 0.186434327348138, 'NaN', 'NaN', 0.19467001622080568, ['Not implemented'], 0.18890157544450695, 'NaN', ['Not implemented'], 'NaN', 0.268912405169322, ['Not implemented'], ['Not implemented'], 0.2690741553709125, ['Not implemented'], 0.2827789644658632, 'NaN', ['Not implemented'], 'NaN', 0.2071062581244543, ['Not implemented'], ['Not implemented'], 0.1864593522814419, ['Not implemented'], 0.26962225708278653, 'NaN', ['Not implemented'], 'NaN', 0.19475400724757327, ['Not implemented'], ['Not implemented'], 0.18900823708493064, ['Not implemented'], 0.1946348373061708, 0.29413321576863416, 0.26685746784585684, ['Not implemented'], 0.29965882007236677, 0.26986657961383675, 0.2067233887563209, ['Not implemented'], 0.2698692972358421, 0.1947141204788786, 0.19409983424846988, ['Not implemented'], 0.19410487532871423, 'NaN', 0.2680448151803187, ['Not implemented'], 'NaN', 0.2070535069220424, ['Not implemented'], 'NaN', 0.1946786372940059, ['Not implemented'], ['Not implemented'], ['Not implemented'], ['Not implemented']]
        EntropyPairs = dict(zip(input_files, Entropies))

        Extracted_Values = dict()
        for infile in input_files:
            file = f'test_systems/{infile}'
            Extracted_Values[infile] = op.Data_Extraction(file, Needed_Values=Values, NeededArguments=Arguments, quiet=True, Temperature=T)[file]

        op.Check_if_Implemented(input_files, {'_Entropy': ['entropy']}, Extracted_Values)

        for infile in input_files:
            self.assertAlmostEqual(Extracted_Values[infile]['entropy'], EntropyPairs[infile])

    def test_Gibbs_Extraction(self):

        input_files = ['CCSD_Ethanol_dal.out', 'CCSD_Ethanol_exci_gaus.out', 'CCSD_Ethanol_gaus.out', 'CCSD_Ethanol_lsdal.out', 'CCSD_Ethanol_orca.out', 'CCSD_Methane_dal.out', 'CCSD_Methane_exci_gaus.out', 'CCSD_Methane_gaus.out', 'CCSD_Methane_lsdal.out', 'CCSD_Methane_orca.out', 'CCSD_Water_dal.out', 'CCSD_Water_exci_gaus.out', 'CCSD_Water_gaus.out', 'CCSD_Water_lsdal.out', 'CCSD_Water_orca.out', 'DFT_Ethanol_exci_dal.out', 'DFT_Ethanol_exci_lsdal.out', 'DFT_Ethanol_exci_orca.out', 'DFT_Ethanol_gaus.out', 'DFT_Ethanol_lsdal.out', 'DFT_Ethanol_opt_lsdal.out', 'DFT_Ethanol_orca.out', 'DFT_Ethanol_pol_lsdal.out', 'DFT_Ethanol_vib_dal.out', 'DFT_Methane_exci_dal.out', 'DFT_Methane_exci_lsdal.out', 'DFT_Methane_exci_orca.out', 'DFT_Methane_gaus.out', 'DFT_Methane_lsdal.out', 'DFT_Methane_opt_lsdal.out', 'DFT_Methane_orca.out', 'DFT_Methane_pol_lsdal.out', 'DFT_Methane_vib_dal.out', 'DFT_Water_exci_dal.out', 'DFT_Water_exci_lsdal.out', 'DFT_Water_exci_orca.out', 'DFT_Water_gaus.out', 'DFT_Water_lsdal.out', 'DFT_Water_opt_lsdal.out', 'DFT_Water_orca.out', 'DFT_Water_pol_lsdal.out', 'DFT_Water_vib_dal.out', 'HF_Ethanol_dal.out', 'HF_Ethanol_gaus.out', 'HF_Ethanol_lsdal.out', 'HF_Ethanol_opt_dal.out', 'HF_Methane_dal.out', 'HF_Methane_gaus.out', 'HF_Methane_lsdal.out', 'HF_Methane_opt_dal.out', 'HF_Water_dal.out', 'HF_Water_gaus.out', 'HF_Water_lsdal.out', 'HF_Water_opt_dal.out', 'MP2_Ethanol_dal.out', 'MP2_Ethanol_gaus.out', 'MP2_Ethanol_lsdal.out', 'MP2_Methane_dal.out', 'MP2_Methane_gaus.out', 'MP2_Methane_lsdal.out', 'MP2_Water_dal.out', 'MP2_Water_gaus.out', 'MP2_Water_lsdal.out', 'RIMP2_Ethanol_lsdal.out', 'RIMP2_Methane_lsdal.out', 'RIMP2_Water_lsdal.out']

        T = 298.15

        Arguments = {'_Energy': True, '_Frequencies': -1, '_Enthalpy': True, '_Entropy': True, '_Gibbs': True}
        Values = [item[0] for item in Arguments.items() if not(item[1] == None or item[1] == False)]

        Gibbsenergies = ['NaN', 'NaN', -154.55612880382864, ['Not implemented'], -154.56294910948864, 'NaN', 'NaN', -40.358589065680334, ['Not implemented'], -40.35878050816765, 'NaN', 'NaN', -76.23490650991604, ['Not implemented'], -76.23631520084102, 'NaN', ['Not implemented'], 'NaN', -154.98987792559052, ['Not implemented'], ['Not implemented'], -154.8946587384102, ['Not implemented'], -154.59250097031872, 'NaN', ['Not implemented'], 'NaN', -40.491721079783176, ['Not implemented'], ['Not implemented'], -40.453525191789915, ['Not implemented'], -40.36719694740137, 'NaN', ['Not implemented'], 'NaN', -76.417857691725, ['Not implemented'], ['Not implemented'], -76.3801736436588, ['Not implemented'], -76.360701495651, -154.03428051304607, -154.03280420808585, ['Not implemented'], -154.03652747983796, -40.17867567784575, -40.171406808476306, ['Not implemented'], -40.17858866941234, -76.02258702312587, -76.02230144205292, ['Not implemented'], -76.02230415667425, 'NaN', -154.51792608290958, ['Not implemented'], 'NaN', -40.33450537753525, ['Not implemented'], 'NaN', -76.22534992579865, ['Not implemented'], ['Not implemented'], ['Not implemented'], ['Not implemented']]
        GibbsenergyPairs = dict(zip(input_files, Gibbsenergies))

        Extracted_Values = dict()
        for infile in input_files:
            file = f'test_systems/{infile}'
            Extracted_Values[infile] = op.Data_Extraction(file, Needed_Values=Values, NeededArguments=Arguments, quiet=True, Temperature=T)[file]

        op.Check_if_Implemented(input_files, {'_Gibbs': ['gibbs']}, Extracted_Values)

        for infile in input_files:
            self.assertAlmostEqual(Extracted_Values[infile]['gibbs'], GibbsenergyPairs[infile])

    def test_Partitionfunction_Extraction(self):

        input_files = ['CCSD_Ethanol_dal.out', 'CCSD_Ethanol_exci_gaus.out', 'CCSD_Ethanol_gaus.out', 'CCSD_Ethanol_lsdal.out', 'CCSD_Ethanol_orca.out', 'CCSD_Methane_dal.out', 'CCSD_Methane_exci_gaus.out', 'CCSD_Methane_gaus.out', 'CCSD_Methane_lsdal.out', 'CCSD_Methane_orca.out', 'CCSD_Water_dal.out', 'CCSD_Water_exci_gaus.out', 'CCSD_Water_gaus.out', 'CCSD_Water_lsdal.out', 'CCSD_Water_orca.out', 'DFT_Ethanol_exci_dal.out', 'DFT_Ethanol_exci_lsdal.out', 'DFT_Ethanol_exci_orca.out', 'DFT_Ethanol_gaus.out', 'DFT_Ethanol_lsdal.out', 'DFT_Ethanol_opt_lsdal.out', 'DFT_Ethanol_orca.out', 'DFT_Ethanol_pol_lsdal.out', 'DFT_Ethanol_vib_dal.out', 'DFT_Methane_exci_dal.out', 'DFT_Methane_exci_lsdal.out', 'DFT_Methane_exci_orca.out', 'DFT_Methane_gaus.out', 'DFT_Methane_lsdal.out', 'DFT_Methane_opt_lsdal.out', 'DFT_Methane_orca.out', 'DFT_Methane_pol_lsdal.out', 'DFT_Methane_vib_dal.out', 'DFT_Water_exci_dal.out', 'DFT_Water_exci_lsdal.out', 'DFT_Water_exci_orca.out', 'DFT_Water_gaus.out', 'DFT_Water_lsdal.out', 'DFT_Water_opt_lsdal.out', 'DFT_Water_orca.out', 'DFT_Water_pol_lsdal.out', 'DFT_Water_vib_dal.out', 'HF_Ethanol_dal.out', 'HF_Ethanol_gaus.out', 'HF_Ethanol_lsdal.out', 'HF_Ethanol_opt_dal.out', 'HF_Methane_dal.out', 'HF_Methane_gaus.out', 'HF_Methane_lsdal.out', 'HF_Methane_opt_dal.out', 'HF_Water_dal.out', 'HF_Water_gaus.out', 'HF_Water_lsdal.out', 'HF_Water_opt_dal.out', 'MP2_Ethanol_dal.out', 'MP2_Ethanol_gaus.out', 'MP2_Ethanol_lsdal.out', 'MP2_Methane_dal.out', 'MP2_Methane_gaus.out', 'MP2_Methane_lsdal.out', 'MP2_Water_dal.out', 'MP2_Water_gaus.out', 'MP2_Water_lsdal.out', 'RIMP2_Ethanol_lsdal.out', 'RIMP2_Methane_lsdal.out', 'RIMP2_Water_lsdal.out']

        T = 298.15

        Arguments = {'_Frequencies': -1, '_PartitionFunctions': True}
        Values = [item[0] for item in Arguments.items() if not(item[1] == None or item[1] == False)]

        Partitionfunctions = ['NaN', 'NaN', 2.6780649532871417e+35, ['Not implemented'], 5.667152009996761e+86, 'NaN', 'NaN', 6.996902242028944e+32, ['Not implemented'], 2.016303027729237e+52, 'NaN', 'NaN', 1.6214471734943105e+32, ['Not implemented'], 1.855949878541049e+38, 'NaN', ['Not implemented'], 'NaN', 2.7583510408613045e+35, ['Not implemented'], ['Not implemented'], 8.976066788823056e+86, ['Not implemented'], 6.503100902499089e+36, 'NaN', ['Not implemented'], 'NaN', 6.945533851464278e+32, ['Not implemented'], ['Not implemented'], 2.3913849688276984e+52, ['Not implemented'], 1.3361303893299186e+36, 'NaN', ['Not implemented'], 'NaN', 1.6372617865412857e+32, ['Not implemented'], ['Not implemented'], 2.030799852472984e+38, ['Not implemented'], 1.6182835638527508e+32, 9.665479849517811e+36, 2.4799362104279636e+35, ['Not implemented'], 1.2818829399878162e+37, 1.3409763612165186e+36, 6.746750821109676e+32, ['Not implemented'], 1.3410390830937153e+36, 1.6316923969362124e+32, 1.5149547641818876e+32, ['Not implemented'], 1.515886233784354e+32, 'NaN', 2.6276086610423462e+35, ['Not implemented'], 'NaN', 6.936366195994587e+32, ['Not implemented'], 'NaN', 1.622822399761551e+32, ['Not implemented'], ['Not implemented'], ['Not implemented'], ['Not implemented']]
        PartitionfunctionPairs = dict(zip(input_files, Partitionfunctions))

        Extracted_Values = dict()
        for infile in input_files:
            file = f'test_systems/{infile}'
            Extracted_Values[infile] = op.Data_Extraction(file, Needed_Values=Values, NeededArguments=Arguments, quiet=True, Temperature=T)[file]

        op.Check_if_Implemented(input_files, {'_PartitionFunctions': ['qTotal']}, Extracted_Values)

        for infile in input_files:
            self.assertAlmostEqual(Extracted_Values[infile]['qTotal'], PartitionfunctionPairs[infile])

if __name__ == '__main__':
    unittest.main()
